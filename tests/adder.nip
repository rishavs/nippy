e~~ this: a single line comment
s
x~/ This: a 
multi line comment /~t

~/ start with char and move ahead till you reach whitespace, symbol or comment. then break token. compare with known terms and save as such.
add flag for alphanumeirc - alphabet/num subtype and for quotes and interpolation. flag for had error. create error list like token list.
/~

t: Text =`` a â›„``

var a:| @Num |-Nil#  =10         ~~ declr and assignment on the same line using the ``:`` operator

txt: Text           ~~ declr and assign can be done separately as well using the ``is`` operator
var txt = ``Yo! Haven't seen you in last {{toInt(``3``) && (1 + 3)}} months``

boo: Bool = true
bag: [Num] = List(1.7, 2, 3)


Shape: 
    | Sqiuggly                      ~~ The leading "|" is optional
    | Rectangle: Obj{width : float, length : float}
    | Circle   : Obj{radius : float, area: Fun}
    | Prism    : Obj{width : float, height : float}

    
newShape: Shape = Rectangle(
    width = 12,
    length = 10
)

Customer: Obj(First: string, Last: string) {
    // var First: string,
    // var Last: string,
    var purchasedCOunt: Int
    ssn: Int,
    accountNumber: Int,
    saySSN: Fun(ssn: Num -> Text) {
        show ssn
    }
}

newCustomer = Customer (
    First   = ``John``,
    Last    = ``Doe``,
)
newCustomer.addTraits([prop1, prop2, func1, func2, func3], Countable)
newCustomer.removeTraits([func4, func5])

~/ A trait is a named list of functions and variables (list of declared identifiers) which can be linked to object instances. eg. Iterable, COuntable, BlueEyed etc) /~

~/
NumList: List[Num]
newTextList: [Text] = [``a``, ``b``]

sayName: Fun(name: Text -> Text) {
    return ``My name: {{name}}``
}

show sayName(``Donkey Kong``)

^.^ code blocks ^.^ 

aLoop = While :

    break aLoop;
}

aLoop(true)

[2..10, 1].each (i, v) {

}

somevar = when (x) {
    1 -> returnSomething(),
    2 -> resturnSomethingElse(),
    _ -> whatever()

}

y = if x elseif else 

/~